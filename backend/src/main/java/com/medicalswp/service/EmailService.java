package com.medicalswp.service;

import com.medicalswp.entity.Appointment;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.time.format.DateTimeFormatter;

@Service
public class EmailService {
    
    private static final Logger logger = LoggerFactory.getLogger(EmailService.class);
    
    @Autowired
    private JavaMailSender mailSender;
    
    @Value("${spring.mail.username:medical-system@florismcare.com}")
    private String fromEmail;
    
    @Value("${app.name:Florism Care}")
    private String appName;
    
    @Value("${app.contact.phone:1900 1234}")
    private String contactPhone;
    
    @Value("${app.contact.email:contact@florismcare.com}")
    private String contactEmail;
    
    @Value("${app.contact.address:123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM}")
    private String contactAddress;
    
    /**
     * G·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·ªãch h·∫πn
     */
    public boolean sendAppointmentConfirmation(Appointment appointment) {
        try {
            logger.info("=== Attempting to send confirmation email to: {} ===", appointment.getEmail());
            
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            
            helper.setFrom(fromEmail);
            helper.setTo(appointment.getEmail());
            helper.setSubject("‚úÖ X√°c nh·∫≠n ƒë·∫∑t l·ªãch h·∫πn - " + appName);
            
            String htmlContent = buildConfirmationEmailContent(appointment);
            helper.setText(htmlContent, true);
            
            logger.info("=== Sending email via SMTP ===");
            mailSender.send(message);
            logger.info("=== Confirmation email sent successfully to: {} ===", appointment.getEmail());
            return true;
            
        } catch (MessagingException e) {
            logger.error("=== MessagingException when sending confirmation email to: {} ===", appointment.getEmail(), e);
            return false;
        } catch (Exception e) {
            logger.error("=== Unexpected error when sending confirmation email to: {} ===", appointment.getEmail(), e);
            return false;
        }
    }
    
    /**
     * G·ª≠i email nh·∫Øc nh·ªü tr∆∞·ªõc ng√†y h·∫πn
     */
    public boolean sendAppointmentReminder(Appointment appointment) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            
            helper.setFrom(fromEmail);
            helper.setTo(appointment.getEmail());
            helper.setSubject("üîî Nh·∫Øc nh·ªü l·ªãch h·∫πn ng√†y mai - " + appName);
            
            String htmlContent = buildReminderEmailContent(appointment);
            helper.setText(htmlContent, true);
            
            mailSender.send(message);
            logger.info("Reminder email sent successfully to: {}", appointment.getEmail());
            return true;
            
        } catch (MessagingException e) {
            logger.error("Failed to send reminder email to: {}", appointment.getEmail(), e);
            return false;
        }
    }
    
    /**
     * G·ª≠i email h·ªßy l·ªãch h·∫πn
     */
    public boolean sendAppointmentCancellation(Appointment appointment, String reason) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            
            helper.setFrom(fromEmail);
            helper.setTo(appointment.getEmail());
            helper.setSubject("‚ùå Th√¥ng b√°o h·ªßy l·ªãch h·∫πn - " + appName);
            
            String htmlContent = buildCancellationEmailContent(appointment, reason);
            helper.setText(htmlContent, true);
            
            mailSender.send(message);
            logger.info("Cancellation email sent successfully to: {}", appointment.getEmail());
            return true;
            
        } catch (MessagingException e) {
            logger.error("Failed to send cancellation email to: {}", appointment.getEmail(), e);
            return false;
        }
    }
    
    /**
     * G·ª≠i email simple (fallback)
     */
    public boolean sendSimpleEmail(String to, String subject, String content) {
        try {
            logger.info("=== Attempting to send simple email to: {} ===", to);
            logger.info("=== Email from: {} ===", fromEmail);
            
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(to);
            message.setSubject(subject);
            message.setText(content);
            
            logger.info("=== Sending simple email via SMTP ===");
            mailSender.send(message);
            logger.info("=== Simple email sent successfully to: {} ===", to);
            return true;
            
        } catch (Exception e) {
            logger.error("=== Failed to send simple email to: {} ===", to, e);
            logger.error("=== Error details: {} ===", e.getMessage());
            return false;
        }
    }
    
    /**
     * G·ª≠i email y√™u c·∫ßu thanh to√°n
     */
    public boolean sendPaymentRequest(Appointment appointment) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            
            helper.setFrom(fromEmail);
            helper.setTo(appointment.getEmail());
            helper.setSubject("üí≥ Y√™u c·∫ßu thanh to√°n l·ªãch h·∫πn - " + appName);
            
            String htmlContent = buildPaymentRequestEmailContent(appointment);
            helper.setText(htmlContent, true);
            
            mailSender.send(message);
            logger.info("Payment request email sent successfully to: {}", appointment.getEmail());
            return true;
            
        } catch (MessagingException e) {
            logger.error("Failed to send payment request email to: {}", appointment.getEmail(), e);
            return false;
        }
    }
    
    private String buildConfirmationEmailContent(Appointment appointment) {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        
        return "<!DOCTYPE html>" +
        "<html><head><meta charset=\"UTF-8\"><style>" +
        "body{font-family:Arial,sans-serif;line-height:1.6;color:#333}" +
        ".container{max-width:600px;margin:0 auto;padding:20px}" +
        ".header{background:linear-gradient(135deg,#EC4899,#BE185D);color:white;padding:30px;text-align:center;border-radius:10px 10px 0 0}" +
        ".content{background:#fff;padding:30px;border:1px solid #e0e0e0}" +
        ".appointment-info{background:#f8f9fa;padding:20px;border-radius:8px;margin:20px 0}" +
        ".highlight{color:#EC4899;font-weight:bold}" +
        ".footer{background:#f8f9fa;padding:20px;text-align:center;border-radius:0 0 10px 10px;font-size:14px;color:#666}" +
        "</style></head><body>" +
        "<div class=\"container\"><div class=\"header\">" +
        "<h1>‚úÖ X√°c nh·∫≠n ƒë·∫∑t l·ªãch h·∫πn</h1><p>" + appName + "</p></div>" +
        "<div class=\"content\"><p>K√≠nh ch√†o <strong>" + appointment.getFullName() + "</strong>,</p>" +
        "<p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·ªãch h·∫πn c·ªßa b·∫°n:</p>" +
        "<div class=\"appointment-info\"><h3>üìÖ Th√¥ng tin l·ªãch h·∫πn</h3>" +
        "<p><strong>M√£ l·ªãch h·∫πn:</strong> <span class=\"highlight\">#" + appointment.getId() + "</span></p>" +
        "<p><strong>Ng√†y kh√°m:</strong> <span class=\"highlight\">" + appointment.getAppointmentDate().format(dateFormatter) + "</span></p>" +
        "<p><strong>Gi·ªù kh√°m:</strong> <span class=\"highlight\">" + appointment.getAppointmentTime().format(timeFormatter) + "</span></p>" +
        "<p><strong>Khoa kh√°m:</strong> " + appointment.getDepartment() + "</p>" +
        (appointment.getReason() != null && !appointment.getReason().isEmpty() ? 
            "<p><strong>L√Ω do kh√°m:</strong> " + appointment.getReason() + "</p>" : "") +
        "</div><p><strong>L∆∞u √Ω:</strong> Vui l√≤ng ƒë·∫øn tr∆∞·ªõc gi·ªù h·∫πn 15 ph√∫t v√† mang theo CMND, th·∫ª BHYT.</p>" +
        "<p>Li√™n h·ªá: " + contactPhone + " | " + contactEmail + "</p>" +
        "<p>Tr√¢n tr·ªçng,<br><strong>" + appName + "</strong></p></div>" +
        "<div class=\"footer\"><p>" + contactAddress + "</p></div></div></body></html>";
    }
    
    private String buildReminderEmailContent(Appointment appointment) {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        
        return "<!DOCTYPE html>" +
        "<html><head><meta charset=\"UTF-8\"><style>" +
        "body{font-family:Arial,sans-serif;line-height:1.6;color:#333}" +
        ".container{max-width:600px;margin:0 auto;padding:20px}" +
        ".header{background:linear-gradient(135deg,#3B82F6,#1E40AF);color:white;padding:30px;text-align:center;border-radius:10px 10px 0 0}" +
        ".content{background:#fff;padding:30px;border:1px solid #e0e0e0}" +
        ".appointment-info{background:#eff6ff;padding:20px;border-radius:8px;margin:20px 0}" +
        ".highlight{color:#3B82F6;font-weight:bold}" +
        ".footer{background:#f8f9fa;padding:20px;text-align:center;border-radius:0 0 10px 10px;font-size:14px;color:#666}" +
        "</style></head><body>" +
        "<div class=\"container\"><div class=\"header\">" +
        "<h1>üîî Nh·∫Øc nh·ªü l·ªãch h·∫πn</h1><p>" + appName + "</p></div>" +
        "<div class=\"content\"><p>K√≠nh ch√†o <strong>" + appointment.getFullName() + "</strong>,</p>" +
        "<p>L·ªãch h·∫πn c·ªßa b·∫°n s·∫Ω di·ªÖn ra v√†o <strong>ng√†y mai</strong>:</p>" +
        "<div class=\"appointment-info\"><h3>üìÖ Th√¥ng tin l·ªãch h·∫πn</h3>" +
        "<p><strong>M√£ l·ªãch h·∫πn:</strong> <span class=\"highlight\">#" + appointment.getId() + "</span></p>" +
        "<p><strong>Ng√†y kh√°m:</strong> <span class=\"highlight\">" + appointment.getAppointmentDate().format(dateFormatter) + "</span></p>" +
        "<p><strong>Gi·ªù kh√°m:</strong> <span class=\"highlight\">" + appointment.getAppointmentTime().format(timeFormatter) + "</span></p>" +
        "<p><strong>Khoa kh√°m:</strong> " + appointment.getDepartment() + "</p>" +
        "</div><p><strong>Chu·∫©n b·ªã:</strong> ƒê·∫øn tr∆∞·ªõc 15 ph√∫t, mang CMND v√† th·∫ª BHYT.</p>" +
        "<p>H·ªßy l·ªãch: " + contactPhone + " | " + contactEmail + "</p>" +
        "<p>Tr√¢n tr·ªçng,<br><strong>" + appName + "</strong></p></div>" +
        "<div class=\"footer\"><p>" + contactAddress + "</p></div></div></body></html>";
    }
    
    private String buildCancellationEmailContent(Appointment appointment, String reason) {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        
        return "<!DOCTYPE html>" +
        "<html><head><meta charset=\"UTF-8\"><style>" +
        "body{font-family:Arial,sans-serif;line-height:1.6;color:#333}" +
        ".container{max-width:600px;margin:0 auto;padding:20px}" +
        ".header{background:linear-gradient(135deg,#DC2626,#991B1B);color:white;padding:30px;text-align:center;border-radius:10px 10px 0 0}" +
        ".content{background:#fff;padding:30px;border:1px solid #e0e0e0}" +
        ".appointment-info{background:#fef2f2;padding:20px;border-radius:8px;margin:20px 0}" +
        ".footer{background:#f8f9fa;padding:20px;text-align:center;border-radius:0 0 10px 10px;font-size:14px;color:#666}" +
        "</style></head><body>" +
        "<div class=\"container\"><div class=\"header\">" +
        "<h1>‚ùå Th√¥ng b√°o h·ªßy l·ªãch h·∫πn</h1><p>" + appName + "</p></div>" +
        "<div class=\"content\"><p>K√≠nh ch√†o <strong>" + appointment.getFullName() + "</strong>,</p>" +
        "<p>L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy:</p>" +
        "<div class=\"appointment-info\"><h3>üìÖ L·ªãch h·∫πn ƒë√£ h·ªßy</h3>" +
        "<p><strong>M√£:</strong> #" + appointment.getId() + "</p>" +
        "<p><strong>Ng√†y:</strong> " + appointment.getAppointmentDate().format(dateFormatter) + "</p>" +
        "<p><strong>Gi·ªù:</strong> " + appointment.getAppointmentTime().format(timeFormatter) + "</p>" +
        "<p><strong>Khoa:</strong> " + appointment.getDepartment() + "</p>" +
        (reason != null && !reason.isEmpty() ? "<p><strong>L√Ω do:</strong> " + reason + "</p>" : "") +
        "</div><p>ƒê·∫∑t l·ªãch m·ªõi: " + contactPhone + " | " + contactEmail + "</p>" +
        "<p>Tr√¢n tr·ªçng,<br><strong>" + appName + "</strong></p></div>" +
        "<div class=\"footer\"><p>" + contactAddress + "</p></div></div></body></html>";
    }
    
    private String buildPaymentRequestEmailContent(Appointment appointment) {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        
        return "<!DOCTYPE html>" +
        "<html><head><meta charset=\"UTF-8\"><style>" +
        "body{font-family:Arial,sans-serif;line-height:1.6;color:#333}" +
        ".container{max-width:600px;margin:0 auto;padding:20px}" +
        ".header{background:linear-gradient(135deg,#F59E0B,#D97706);color:white;padding:30px;text-align:center;border-radius:10px 10px 0 0}" +
        ".content{background:#fff;padding:30px;border:1px solid #e0e0e0}" +
        ".appointment-info{background:#fef3c7;padding:20px;border-radius:8px;margin:20px 0}" +
        ".highlight{color:#F59E0B;font-weight:bold}" +
        ".payment-info{background:#fff7ed;padding:20px;border-radius:8px;margin:20px 0;border-left:4px solid #F59E0B}" +
        ".footer{background:#f8f9fa;padding:20px;text-align:center;border-radius:0 0 10px 10px;font-size:14px;color:#666}" +
        "</style></head><body>" +
        "<div class=\"container\"><div class=\"header\">" +
        "<h1>üí≥ Y√™u c·∫ßu thanh to√°n</h1><p>" + appName + "</p></div>" +
        "<div class=\"content\"><p>K√≠nh ch√†o <strong>" + appointment.getFullName() + "</strong>,</p>" +
        "<p>L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† c·∫ßn thanh to√°n ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒë·∫∑t l·ªãch:</p>" +
        "<div class=\"appointment-info\"><h3>üìÖ Th√¥ng tin l·ªãch h·∫πn</h3>" +
        "<p><strong>M√£ l·ªãch h·∫πn:</strong> <span class=\"highlight\">#" + appointment.getId() + "</span></p>" +
        "<p><strong>Ng√†y kh√°m:</strong> <span class=\"highlight\">" + appointment.getAppointmentDate().format(dateFormatter) + "</span></p>" +
        "<p><strong>Gi·ªù kh√°m:</strong> <span class=\"highlight\">" + appointment.getAppointmentTime().format(timeFormatter) + "</span></p>" +
        "<p><strong>Khoa kh√°m:</strong> " + appointment.getDepartment().getDepartmentName() + "</p>" +
        (appointment.getDoctor() != null ? 
            "<p><strong>B√°c sƒ© ph·ª• tr√°ch:</strong> " + appointment.getDoctor().getFullName() + "</p>" : "") +
        "</div>" +
        "<div class=\"payment-info\"><h3>üí∞ Th√¥ng tin thanh to√°n</h3>" +
        "<p><strong>Ph√≠ kh√°m:</strong> <span class=\"highlight\">" + 
        String.format("%,.0f VNƒê", appointment.getPaymentAmount() != null ? appointment.getPaymentAmount() : 500000.0) + 
        "</span></p>" +
        "<p><strong>H√¨nh th·ª©c thanh to√°n:</strong></p>" +
        "<ul>" +
        "<li>Ti·ªÅn m·∫∑t t·∫°i qu·∫ßy l·ªÖ t√¢n</li>" +
        "<li>Chuy·ªÉn kho·∫£n: <strong>1234567890 - Ng√¢n h√†ng ABC</strong></li>" +
        "<li>Thanh to√°n qua ·ª©ng d·ª•ng ng√¢n h√†ng</li>" +
        "</ul>" +
        "<p><strong>N·ªôi dung chuy·ªÉn kho·∫£n:</strong> <span class=\"highlight\">THANHTOAN #" + appointment.getId() + " " + appointment.getFullName() + "</span></p>" +
        "</div>" +
        "<p><strong>L∆∞u √Ω:</strong> Vui l√≤ng thanh to√°n tr∆∞·ªõc 24 gi·ªù so v·ªõi gi·ªù h·∫πn. Sau khi thanh to√°n, vui l√≤ng gi·ªØ bi√™n lai ƒë·ªÉ xu·∫•t tr√¨nh khi ƒë·∫øn kh√°m.</p>" +
        "<p>Li√™n h·ªá h·ªó tr·ª£: " + contactPhone + " | " + contactEmail + "</p>" +
        "<p>Tr√¢n tr·ªçng,<br><strong>" + appName + "</strong></p></div>" +
        "<div class=\"footer\"><p>" + contactAddress + "</p></div></div></body></html>";
    }
} 